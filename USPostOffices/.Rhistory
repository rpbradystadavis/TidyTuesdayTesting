firstdf = data.frame(1:100)
colnames(firstdf)  = c('first')
a = 0
sapply(1:100,function(x){
firstdf$sampled = sample(firstdf$first, 100,replace = FALSE)
a = a  + ifelse(sum(ifelse(firstdf$first - firstdf$sampled == 0,1,0)) > 0,1,0)
}
)
sapply(1:100,function(x){
firstdf$sampled = sample(firstdf$first, 100,replace = FALSE)
a = a  + ifelse(sum(ifelse(firstdf$first - firstdf$sampled == 0,1,0)) > 0,1,0)
return(a)
}
)
a
f = sapply(1:100,function(x){
firstdf$sampled = sample(firstdf$first, 100,replace = FALSE)
a = a  + ifelse(sum(ifelse(firstdf$first - firstdf$sampled == 0,1,0)) > 0,1,0)
return(a)
}
)
f
f = sapply(1:100,function(x){
firstdf$sampled = sample(firstdf$first, 100,replace = FALSE)
a = a  + ifelse(sum(ifelse(firstdf$first - firstdf$sampled == 0,1,0)) > 0,1,0)
print(a)
return(a)
}
)
firstdf$sampled = sample(firstdf$first, 100,replace = FALSE)
a = a  + ifelse(sum(ifelse(firstdf$first - firstdf$sampled == 0,1,0)) > 0,1,0)
print(a)
firstdf$sampled = sample(firstdf$first, 100,replace = FALSE)
a = a  + ifelse(sum(ifelse(firstdf$first - firstdf$sampled == 0,1,0)) > 0,1,0)
print(a)
firstdf$sampled = sample(firstdf$first, 100,replace = FALSE)
a = a  + ifelse(sum(ifelse(firstdf$first - firstdf$sampled == 0,1,0)) > 0,1,0)
print(a)
firstdf$sampled = sample(firstdf$first, 100,replace = FALSE)
a = a  + ifelse(sum(ifelse(firstdf$first - firstdf$sampled == 0,1,0)) > 0,1,0)
print(a)
firstdf$sampled = sample(firstdf$first, 100,replace = FALSE)
a = a  + ifelse(sum(ifelse(firstdf$first - firstdf$sampled == 0,1,0)) > 0,1,0)
print(a)
firstdf$sampled = sample(firstdf$first, 100,replace = FALSE)
a = a  + ifelse(sum(ifelse(firstdf$first - firstdf$sampled == 0,1,0)) > 0,1,0)
print(a)
f = sapply(1:100,function(x){
firstdf$sampled = sample(firstdf$first, 100,replace = FALSE)
a = a  + ifelse(sum(ifelse(firstdf$first - firstdf$sampled == 0,1,0)) > 0,1,0)
print(a)
return(a)
}
)
a = 0
f = sapply(1:100,function(x){
firstdf$sampled = sample(firstdf$first, 100,replace = FALSE)
a = a  + ifelse(sum(ifelse(firstdf$first - firstdf$sampled == 0,1,0)) > 0,1,0)
print(a)
return(a)
}
)
f
sum(f)
firstdf = data.frame(1:10000)
colnames(firstdf)  = c('first')
f = sapply(1:100,function(x){
firstdf$sampled = sample(firstdf$first, 100,replace = FALSE)
a = a  + ifelse(sum(ifelse(firstdf$first - firstdf$sampled == 0,1,0)) > 0,1,0)
print(a)
return(a)
}
)
sum(f)
f = sapply(1:100,function(x){
firstdf$sampled = sample(firstdf$first, 100,replace = FALSE)
a = a  + ifelse(sum(ifelse(firstdf$first - firstdf$sampled == 0,1,0)) > 0,1,0)
print(a)
return(a)
}
)
f = sapply(1:100,function(x){
firstdf$sampled = sample(firstdf$first, 100,replace = FALSE)
a = a  + ifelse(sum(ifelse(firstdf$first - firstdf$sampled == 0,1,0)) > 0,1,0)
return(a)
}
)
sum(f)
f = sapply(1:100,function(x){
firstdf$sampled = sample(firstdf$first, length(firstdf$first),replace = FALSE)
a = a  + ifelse(sum(ifelse(firstdf$first - firstdf$sampled == 0,1,0)) > 0,1,0)
return(a)
}
)
sum(f)
firstdf = data.frame(1:10000)
colnames(firstdf)  = c('first')
f = sapply(1:100,function(x){
firstdf$sampled = sample(firstdf$first, length(firstdf$first),replace = FALSE)
a = a  + ifelse(sum(ifelse(firstdf$first - firstdf$sampled == 0,1,0)) > 0,1,0)
return(a)
}
)
f = sapply(1:1000,function(x){
firstdf$sampled = sample(firstdf$first, length(firstdf$first),replace = FALSE)
a = a  + ifelse(sum(ifelse(firstdf$first - firstdf$sampled == 0,1,0)) > 0,1,0)
return(a)
}
)
sum(f)
f = sapply(1:1000,function(x){
firstdf$sampled = sample(firstdf$first, length(firstdf$first),replace = FALSE)
a = a  + ifelse(sum(ifelse(firstdf$first - firstdf$sampled == 0,1,0)) > 0,1,0)
return(a)
}
)
sum(f)
(1 - sum(f))/1000
(1000 -  sum(f))/1000
Matcher = function(i,y){
#function takes i, number of people who throw hats, Y is number of samples to run
firstdf = data.frame(1:i)
colnames(firstdf)  = c('first')
a = 0
f = sapply(1:1000,function(x){
firstdf$sampled = sample(firstdf$first, length(firstdf$first),replace = FALSE)
a = a  + ifelse(sum(ifelse(firstdf$first - firstdf$sampled == 0,1,0)) > 0,1,0)
return(a)
})
samps = 1000 -  sum(f))/1000
return(samps)  # length of SAPPLY is important here.
}
samps = (1000 -  sum(f))/1000
Matcher = function(i,y){
#function takes i, number of people who throw hats, Y is number of samples to run
firstdf = data.frame(1:i)
colnames(firstdf)  = c('first')
a = 0
f = sapply(1:1000,function(x){
firstdf$sampled = sample(firstdf$first, length(firstdf$first),replace = FALSE)
a = a  + ifelse(sum(ifelse(firstdf$first - firstdf$sampled == 0,1,0)) > 0,1,0)
return(a)
})
samps = (1000 -  sum(f))/1000
return(samps)  # length of SAPPLY is important here.
}
Matcher = function(i,y){
#function takes i, number of people who throw hats, Y is number of samples to run
firstdf = data.frame(1:i)
colnames(firstdf)  = c('first')
a = 0
f = sapply(1:y,function(x){
firstdf$sampled = sample(firstdf$first, length(firstdf$first),replace = FALSE)
a = a  + ifelse(sum(ifelse(firstdf$first - firstdf$sampled == 0,1,0)) > 0,1,0)
return(a)
})
samps = (y -  sum(f))/y
return(samps)  # length of SAPPLY is important here.
}
Matcher(100,20)
Matcher(10,20)
Matcher(10,200)
Matcher(10,500000)
Matcher(10,5000)
Matcher(1,5000)
Matcher(10,5)
Matcher(10,5)
Matcher(10,5)
Matcher(10,5)
Matcher(100,5)
Matcher(100,5)
Matcher(100,500) #
Matcher(100,5)
Matcher(100,5)
sapply(1:100,function(x){
return(Matcher(100,5))
})
hist(sapply(1:100,function(x){
return(Matcher(100,5))
}))
Matcher(sapply(1:100,function(x){
hist(sapply(1:100,function(x){
return(Matcher(100,500))
}))
return(Matcher(100,5000))
hist(sapply(1:100,function(x){
return(Matcher(100,5000))
}))
getwd()
read.csv('Downloads/whr.csv')
countrything = read.csv('Downloads/whr.csv')
head(countrything)
dim(countrything)
cor(countrything$Log.GDP.per.capita,countrything$Confidence.in.national.government)
is.na(countrything$Log.GDP.per.capita)
smallerframe = countrything[,c('Log.GDP.per.capita')]
smallerframe
smallerframe = countrything[,c('Log.GDP.per.capita','Confidence.in.national.government')]
smallerframe
cor(na.omit(countrything$Log.GDP.per.capita,countrything$Confidence.in.national.government))
cor(na.omit(as.matrix(countrything$Log.GDP.per.capita,countrything$Confidence.in.national.government)))
smallerframe[!is.na(smallerframe$Log.GDP.per.capita),]
smallerframe[!is.na(smallerframe$Log.GDP.per.capita) | !is.na(smallerframe$Confidence.in.national.government),]
smallerframe[!is.na(smallerframe$Log.GDP.per.capita) & !is.na(smallerframe$Confidence.in.national.government),]
nona = smallerframe[!is.na(smallerframe$Log.GDP.per.capita) & !is.na(smallerframe$Confidence.in.national.government),]
corr(nona$Log.GDP.per.capita,nona$Confidence.in.national.government)
cor(nona$Log.GDP.per.capita,nona$Confidence.in.national.government)
Ggplot(countrything aes(x=log.GDP.per.capita, y=confidence.in.national.government) + geompoint()+ geom_smooth(method=lm,color=“red”, se= F)
libary('ggplot2')
library(ggplot2)
ggplot(countrything aes(x=log.GDP.per.capita, y=confidence.in.national.government) + geompoint()+ geom_smooth(method=lm,color=“red”, se= F)
ggplot(countrything, aes(x=log.GDP.per.capita, y=confidence.in.national.government) + geompoint()+ geom_smooth(method=lm,color=“red”, se= F)
ggplot(data = countrything,aes(countrything$Log.GDP.per.capita,countrything$Confidence.in.national.government)) + geom_point()
ggplot(data = countrything,aes(countrything$Log.GDP.per.capita,countrything$Confidence.in.national.government)) + geom_point()    +  geom_smooth(method=lm,color=“red”, se= F)
colnames(countrything)
countrything$Freedom.to.make.life.choices
countrything$Perceptions.of.corruption
ggplot(data = countrything,aes(countrything$Perceptions.of.corruption,countrything$Confidence.in.national.government))
countrything$Perceptions.of.corruption
smallerframe = countrything[,c('Perceptions.of.corruption','Confidence.in.national.government')]
nona = smallerframe[!is.na(smallerframe$Log.GDP.per.capita) & !is.na(smallerframe$Confidence.in.national.government),]
nona = smallerframe[!is.na(smallerframe$Perceptions.of.corruption) & !is.na(smallerframe$Confidence.in.national.government),]
cor(nona$Log.GDP.per.capita,nona$Confidence.in.national.government)
cor(nona$Perceptions.of.corruption,nona$Confidence.in.national.government)
ggplot(data = countrything,aes(countrything$Perceptions.of.corruption,countrything$Confidence.in.national.government))  + geom_point()
ggplot(data = countrything,aes(countrything$Perceptions.of.corruption,countrything$Confidence.in.national.government))  + geom_point()
countrything$Perceptions.of.corruption
smallerframe = countrything[,c('log.GDP.per.capita','Confidence.in.national.government')]
smallerframe = countrything[,c('Log.GDP.per.capita','Confidence.in.national.government')]
nona = smallerframe[!is.na(smallerframe$Log.GDP.per.capita) & !is.na(smallerframe$Confidence.in.national.government),]
ggplot(countrything, aes(x=log.GDP.per.capita, y=confidence.in.national.government) + geompoint()
ggplot(countrything, aes(x=log.GDP.per.capita, y=confidence.in.national.government) + geompoint()
ggplot(countrything, aes(x=log.GDP.per.capita, y=confidence.in.national.government)) + geompoint()
ggplot(countrything, aes(x=log.GDP.per.capita, y=confidence.in.national.government)) + geom_point()
ggplot(countrything, aes(x=Log.GDP.per.capita, y=confidence.in.national.government)) + geom_point()
ggplot(countrything, aes(x=Log.GDP.per.capita, y=Confidence.in.national.government)) + geom_point()
Ggplot(whr, aes(x=Log.GDP.per.capita, y=Confidence.in.national.government) + geompoint()+ geom_smooth(method=lm,color=“red”, se= F)
Ggplot(countrything aes(x=Log.GDP.per.capita, y=Confidence.in.national.government) + geompoint()+ geom_smooth(method=lm,color=“red”, se= F)
ggplot(countrything aes(x=Log.GDP.per.capita, y=Confidence.in.national.government) + geompoint()+ geom_smooth(method=lm,color=“red”, se= F)
ggplot(countrything ,aes(x=Log.GDP.per.capita, y=Confidence.in.national.government) + geompoint()+ geom_smooth(method=lm,color=“red”, se= F)
ggplot(countrything ,aes(x=Log.GDP.per.capita, y=Confidence.in.national.government)) + geompoint()+ geom_smooth(method=lm,color=“red”, se= F)
ggplot(countrything ,aes(x=Log.GDP.per.capita, y=Confidence.in.national.government)) + geompoint()
ggplot(countrything ,aes(x=Log.GDP.per.capita, y=Confidence.in.national.government)) + geom_point()+ geom_smooth(method=lm,color=“red”, se= F)
ggplot(countrything ,aes(x=Log.GDP.per.capita, y=Confidence.in.national.government)) + geom_point()
ggplot(countrything ,aes(x=Log.GDP.per.capita, y=Confidence.in.national.government)) + geom_point()+ geom_smooth(method=lm,color=“red”, se= F)
ggplot(countrything ,aes(x=Log.GDP.per.capita, y=Confidence.in.national.government)) + geom_point()+ geom_smooth(method=lm, se= F)
ggplot(countrything ,aes(x=Log.GDP.per.capita, y=Confidence.in.national.government)) + geom_point()+ geom_smooth(method=lm, se= F)
ggplot(countrything ,aes(x=Log.GDP.per.capita, y=Confidence.in.national.government)) + geom_point()+ geom_smooth(method=lm, se= F,'red')
ggplot(countrything ,aes(x=Log.GDP.per.capita, y=Confidence.in.national.government)) + geom_point()+ geom_smooth(method=lm, se= F,aes(color = 'red'))
cor(countrything)
sapply(countrything,class(x))
sapply(countrything,class(X))
sapply(X = countrything,class(X))
sapply(X = countrything,FUN = class(X))
sapply(X = count.fields(),FUN = class(X))
sapply(X = countrything,FUN = class(X))
sapply(X = countrything,FUN = class())
sapply(X = countrything,FUN = class)
cor(countrything[,!c('country')])
countrything[,!c('country')]
cor(countrything[,-2])
countrything[,-2]
cor(countrything[,-2], use = "complete.obs")
smallerframe = countrything[,c('Log.GDP.per.capita','Healthy.life.expectancy.at.birth')]
nona = smallerframe[!is.na(smallerframe$Log.GDP.per.capita) & !is.na(smallerframe$Confidence.in.national.government),]
ggplot(countrything ,aes(x=Log.GDP.per.capita, y=Healthy.life.expectancy.at.birth)) +
geom_point()+ geom_smooth(method=lm, se= F,aes(color = 'red')) # fixed friends code
install.packages("corrplot")
library(corrplot)
corrplot(countrything, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
corrplot(countrything[,-2], type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
res = cor(countrything[,-2], use = "complete.obs")
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
res
res = cor(countrything[,-c(1,2)], use = "complete.obs")
res
res = cor(countrything[,-c(3,2)], use = "complete.obs")
res
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
res = cor(countrything[,-c(3,2)], use = "complete.obs")
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
res
res = cor(countrything[,-c(3,2)], use = "complete.obs")
whr = read.csv('Downloads/whr.csv')
res = cor(whr[,-c(3,2)], use = "complete.obs")
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
ggplot(whr,aes(x = whr$Freedom.to.make.life.choices))
ggplot(whr,aes(x = whr$Freedom.to.make.life.choices)) + geom_density()
ggplot(whr,aes(x = whr$Freedom.to.make.life.choices)) + geom_density(aes(fill = 'blue'))
ggplot(whr,aes(x = whr$Freedom.to.make.life.choices)) + geom_density(aes(col = 'blue'))
ggplot(whr,aes(x = whr$Freedom.to.make.life.choices)) + geom_density(aes(col = 'blue',fill = 'blue'))
ggplot(whr,aes(x = whr$Freedom.to.make.life.choices)) + geom_density(  geom_density(color="darkblue", fill="lightblue"))
ggplot(whr,aes(x = whr$Freedom.to.make.life.choices)) + geom_density(  color="darkblue", fill="lightblue")
countrything = read.csv('Downloads/whr.csv')
res = cor(whr[,-c(3,2)], use = "complete.obs")
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
320000 * 52
integrate(dbeta(x,4,6),.6,1)
integrate(function(x) dbeta(x,4,6),.6,1)
integrate(function(x) dbeta(x,9,11),.45,,55)
integrate(function(x) dbeta(x,9,11),.45,.55)
integrate(function(x) dbeta(x,109,111),.45,.55)
install.packages('tidytuesdayR')
library(tidytuesdayR)
install.packages('gert')
install.packages('tidytuesdayR')
install.packages('usethis')
install.packages('usethis')
install.packages('gert')
install.packages('gert')
install.packages('tidytuesdayR')
library(usethis)
install.packages('tidytuesdayR')
install.packages('tidyverse')
install.packages('ggplot2')
install.packages('gganimate')
install.packages('rgdal')
install.packages('data.table')
install_github("r-spatial/sf", configure.args = "--with-proj-lib=/usr/local/lib/")
library(devtools)
install.packages('devtools')
install_github("r-spatial/sf", configure.args = "--with-proj-lib=/usr/local/lib/")
install.packages('devtools')
library(devtools)
install_github("r-spatial/sf", configure.args = "--with-proj-lib=/usr/local/lib/")
install.packages('transformr')
###Webscrape census state stuff
decades = seq(1810,2000,10)
url = 'https://en.wikipedia.org/wiki/1810_United_States_census'
Poplevels = lapply(decades,function(X){
#Seems to work for most of 1900 - 2000 Different format though
#need new functions for 1800-1900
#Problem decades are 1820 1850? 1860 1870
url = paste('https://en.wikipedia.org/wiki/',X,'_United_States_census',sep = '')
if(!X %in% c(1830,1860,1870) ){
Popstate = session(url) %>%
html_elements('table') %>%
.[[3]] %>%
html_table()
Popstate$Year = X
}
else if (X == 1830){
Popstate = session(url) %>%
html_elements('table') %>%
.[[4]] %>%
html_table()
Popstate$Year = X
}
else if(X == 1860){
Popstate = session(url) %>%
html_elements('table') %>%
.[[4]] %>%
html_table()
Popstate$Year = X
}
else{
Popstate = session(url) %>%
html_elements('table') %>%
.[[5]] %>%
html_table()
Popstate$Year = X
}
return(Popstate)
})
library(tidyverse)
install.packages('rvest')
#install.packages('devtools')
install_github("r-spatial/sf", configure.args = "--with-proj-lib=/usr/local/lib/")
install.packages("rvest")
library(rvest)
library(devtools)
library(tidyverse)
url = 'https://en.wikipedia.org/wiki/1810_United_States_census'
Poplevels = lapply(decades,function(X){
#Seems to work for most of 1900 - 2000 Different format though
#need new functions for 1800-1900
#Problem decades are 1820 1850? 1860 1870
url = paste('https://en.wikipedia.org/wiki/',X,'_United_States_census',sep = '')
if(!X %in% c(1830,1860,1870) ){
Popstate = session(url) %>%
html_elements('table') %>%
.[[3]] %>%
html_table()
Popstate$Year = X
}
else if (X == 1830){
Popstate = session(url) %>%
html_elements('table') %>%
.[[4]] %>%
html_table()
Popstate$Year = X
}
else if(X == 1860){
Popstate = session(url) %>%
html_elements('table') %>%
.[[4]] %>%
html_table()
Popstate$Year = X
}
else{
Popstate = session(url) %>%
html_elements('table') %>%
.[[5]] %>%
html_table()
Popstate$Year = X
}
return(Popstate)
})
bad_decades = c(1830,1860,1870)
url = 'https://en.wikipedia.org/wiki/1870_United_States_census'
Popstate = session(url) %>%
html_elements('table') %>%
.[[5]] %>%
html_table()
nineteencent = lapply(Poplevels[1:9],function(X){
X
X[,names(Poplevels[[1]])]
})
NineteenC = do.call(rbind, nineteencent)
Poplevels[10:20]#Uniform format :)
twentycent = lapply(Poplevels[10:20],function(X){
newcol = as.data.frame(X[,c(1,2,4,7)])
names(newcol) = names(Poplevels[[1]])
return(newcol)
})
TwentyC = do.call(rbind, twentycent)
AllDecades = rbind(NineteenC,TwentyC)
MainStates <- map_data("state")
library(maps)
install.packages('maps')
library(maps)
MainStates <- map_data("state")
MainStates$region
AllDecades$State = tolower(AllDecades$State)
library(dplyr)
names(MainStates)
names(AllDecades)
MainStates$ID = 1:nrow(MainStates)
NewMain= setDT(MainStates)[ , list(order = order,group = group,region = region,latitude = lat, longitude = long,Year = seq(1810, 2000, by = as.integer(10))),by = ID]
US = ggplot() +
geom_polygon( data=NewMain[NewMain$Year == 1810,], aes(x=longitude, y=latitude, group=group),
color="black" )
NewMain= setDT(MainStates)[ , list(order = order,group = group,region = region,latitude = lat, longitude = long,Year = seq(1810, 2000, by = as.integer(10))),by = ID]
library(data.table)
US = ggplot() +
geom_polygon( data=NewMain[NewMain$Year == 1810,], aes(x=longitude, y=latitude, group=group),
color="black" )
NewMain= setDT(MainStates)[ , list(order = order,group = group,region = region,latitude = lat, longitude = long,Year = seq(1810, 2000, by = as.integer(10))),by = ID]
US = ggplot() +
geom_polygon( data=NewMain[NewMain$Year == 1810,], aes(x=longitude, y=latitude, group=group),
color="black" )
US
US = ggplot() +
geom_polygon( data=mergestates, aes(x=longitude, y=latitude, group=group,fill = Population),
color="black" )+
scale_fill_viridis_c(option = "E")+
theme_void()
US
US = ggplot() +
geom_polygon( data=mergestates, aes(x=longitude, y=latitude, group=group,fill = Population),
color="black" )+
scale_fill_viridis_c(option = "E")+
theme_void()
mergestates = left_join(NewMain,AllDecades,by =c('region'='State','Year'='Year') )
US = ggplot() +
geom_polygon( data=mergestates, aes(x=longitude, y=latitude, group=group,fill = Population),
color="black" )+
scale_fill_viridis_c(option = "E")+
theme_void()
US
mergestates$Population = as.numeric(gsub(',','',mergestates$Population))
ggplot(data=mergestates[mergestates$Year == 1810,], aes(long, lat, group = group))+
geom_polygon(aes(fill = Population), color = "white")+
scale_fill_viridis_c(option = "E")+
theme_classic()
mergestates
ggplot(data=mergestates[mergestates$Year == 1810,], aes(longitude, latitude, group = group))+
geom_polygon(aes(fill = Population), color = "white")+
scale_fill_viridis_c(option = "E")+
theme_classic()
US = ggplot() +
geom_polygon( data=mergestates, aes(x=longitude, y=latitude, group=group,fill = Population),
color="black" )+
scale_fill_viridis_c(option = "E")+
theme_void()
US + transition_time(Year) +
labs(title = "Year: {frame_time}")
library(gganimate)
install.packages('gifski')
US + transition_time(Year) +
labs(title = "Year: {frame_time}")
getwd)
getwd()
setwd("~/Desktop/Tidy_Tuesday/TidyTuesdayTesting/USPostOffices")
US + transition_time(Year) +
labs(title = "Year: {frame_time}")
gifski(list.files(pattern = '*.png'),delay = .1,loop = TRUE) #SO that was super easy
library(gifski)
gifski(list.files(pattern = '*.png'),delay = .1,loop = TRUE) #SO that was super easy
